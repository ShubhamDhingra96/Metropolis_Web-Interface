# Generated by Django 3.1.3 on 2020-11-04 11:54

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_column='title', default='', max_length=300)),
                ('description', models.TextField(blank=True, db_column='description', null=True)),
                ('creator', models.CharField(db_column='author', default='', max_length=150)),
            ],
            options={
                'db_table': 'Articles',
            },
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('comment', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('nb_runs', models.IntegerField(default=2, verbose_name='Number of runs')),
                ('status', models.CharField(default='Running', max_length=25)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('time_taken', models.DurationField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Batch',
            },
        ),
        migrations.CreateModel(
            name='Centroid',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('x', models.FloatField(default=0)),
                ('y', models.FloatField(default=0)),
                ('uz1', models.FloatField(default=0)),
                ('uz2', models.FloatField(default=0)),
                ('uz3', models.FloatField(default=0)),
                ('user_id', models.IntegerField(default=0, verbose_name='Id')),
            ],
            options={
                'db_table': 'Centroid',
            },
        ),
        migrations.CreateModel(
            name='Crossing',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('x', models.FloatField(default=0)),
                ('y', models.FloatField(default=0)),
                ('un1', models.FloatField(default=0)),
                ('un2', models.FloatField(default=0)),
                ('un3', models.FloatField(default=0)),
                ('user_id', models.IntegerField(default=0, verbose_name='Id')),
            ],
            options={
                'db_table': 'Crossing',
            },
        ),
        migrations.CreateModel(
            name='Demand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('comment', models.CharField(blank=True, max_length=100, null=True)),
                ('scale', models.FloatField(default=1)),
            ],
            options={
                'db_table': 'Demand',
            },
        ),
        migrations.CreateModel(
            name='Distribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mean', models.FloatField(default=0)),
                ('std', models.FloatField(default=0, verbose_name='Standard Deviation')),
                ('type', models.CharField(choices=[('NONE', 'Constant'), ('UNIFORM', 'Uniform'), ('NORMAL', 'Normal'), ('LOGNORMAL', 'Log-normal')], default='NONE', max_length=9, verbose_name='Type')),
            ],
            options={
                'db_table': 'Distribution',
            },
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('creator', models.CharField(db_column='author', default='', max_length=150)),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_column='name', default='', max_length=300)),
                ('author', models.CharField(db_column='author', default='', max_length=150)),
                ('date', models.DateTimeField(auto_now_add=True, db_column='creation_date')),
                ('description', models.TextField(blank=True, db_column='description', null=True)),
            ],
            options={
                'db_table': 'Events',
            },
        ),
        migrations.CreateModel(
            name='Function',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', help_text='Name of the congestion function', max_length=50, null=True)),
                ('vdf_id', models.IntegerField(default=0, verbose_name='Link id type')),
                ('expression', models.TextField(default='3600*(length/speed)', help_text='Expression of the congestion function')),
                ('user_id', models.IntegerField(default=0, verbose_name='Id')),
            ],
            options={
                'db_table': 'Function',
            },
        ),
        migrations.CreateModel(
            name='FunctionSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('comment', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'FunctionSet',
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', help_text='Name (optional)', max_length=50, null=True)),
                ('destination', models.BigIntegerField(help_text='Destination zone', verbose_name='To')),
                ('lanes', models.FloatField(default=1, help_text='Number of lanes', verbose_name='Lanes')),
                ('length', models.FloatField(default=0, help_text='Length', verbose_name='Length (km)')),
                ('origin', models.BigIntegerField(help_text='Origin zone', verbose_name='From')),
                ('speed', models.FloatField(default=50, help_text='Speed limitation', verbose_name='Speed (km/h)')),
                ('ul1', models.FloatField(default=0)),
                ('ul2', models.FloatField(default=0)),
                ('ul3', models.FloatField(default=0)),
                ('capacity', models.FloatField(default=0, help_text='Capacity per lane (in vehicle per hour)', verbose_name='Capacity (vehicle per hour per lane)')),
                ('dynVol', models.FloatField(default=0)),
                ('dynFlo', models.FloatField(default=0)),
                ('staVol', models.FloatField(default=0)),
                ('user_id', models.IntegerField(default=0, verbose_name='Id')),
            ],
            options={
                'db_table': 'Link',
            },
        ),
        migrations.CreateModel(
            name='LinkSelection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Link name')),
                ('storetype', models.IntegerField(default=1)),
                ('definition', models.TextField(blank=True, null=True)),
                ('user_id', models.IntegerField(default=0, verbose_name='Link id')),
                ('link', models.ManyToManyField(db_table='LinkSelection_Link', to='metro_app.Link')),
            ],
            options={
                'db_table': 'LinkSelection',
            },
        ),
        migrations.CreateModel(
            name='Matrices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('comment', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('defaultValue', models.FloatField(default=0)),
                ('total', models.FloatField(default=0)),
                ('dimension', models.SmallIntegerField(default=2)),
            ],
            options={
                'db_table': 'Matrices',
            },
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('comment', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'Network',
            },
        ),
        migrations.CreateModel(
            name='Scenario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(blank=True, max_length=100, null=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('demand', models.ForeignKey(db_column='demand', on_delete=django.db.models.deletion.CASCADE, to='metro_app.demand')),
            ],
            options={
                'db_table': 'Scenario',
            },
        ),
        migrations.CreateModel(
            name='Simulation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='Name of the simulation', max_length=50)),
                ('comment', models.CharField(blank=True, default='', help_text='Optional comment of the simulation', max_length=100, null=True, verbose_name='Comment (optional)')),
                ('commInterval', models.IntegerField(default=600)),
                ('commLevel', models.IntegerField(default=1)),
                ('commOutput', models.CharField(choices=[('TO_DB', 'To database'), ('TO_FILE', 'To file'), ('TO_STD', 'To std')], default='TO_DB', max_length=7)),
                ('commStarted', models.DateTimeField(auto_now_add=True)),
                ('host', models.CharField(default='localhost', max_length=255)),
                ('status', models.CharField(choices=[('READY', 'Ready'), ('OVER', 'Over'), ('ABORTED', 'Aborted'), ('RUNNING', 'Running')], default='READY', max_length=7)),
                ('incidentsEnabled', models.CharField(choices=[('true', 'True'), ('false', 'False')], default='false', max_length=5)),
                ('advancedDynShpLoops', models.IntegerField(default=10)),
                ('advancedDynShpTreshold', models.IntegerField(default=30)),
                ('advancedLearningSpeed', models.FloatField(default=0.1)),
                ('advancedLearningProcess', models.CharField(choices=[('EXPONENTIAL', 'Exponential'), ('LINEAR', 'Linear'), ('QUADRATIC', 'Quadratic'), ('GENETIC', 'Genetic')], default='EXPONENTIAL', help_text='Function type for the learning process', max_length=11)),
                ('advancedInfoSize', models.CharField(choices=[('LOW', 'Low'), ('NORMAL', 'Normal'), ('HIGH', 'High')], default='NORMAL', help_text='Amount of available informations for users choices', max_length=6)),
                ('advancedStartup', models.IntegerField(default=30, help_text='Percentage of iterations while users have extended informations')),
                ('iterations', models.IntegerField(default=100, help_text='Maximum number of iterations')),
                ('iterations_check', models.BooleanField(default=True, help_text='If checked, the simulation stops when the maximum number of iterations is reached')),
                ('stacLim', models.FloatField(default=0.02, help_text='Critical value for the convergence criterion')),
                ('stac_check', models.BooleanField(default=True, help_text='If checked, the simulation stops when the convergence  criterion is verified', verbose_name='Enable EXPECT convergence criterion')),
                ('outputArcTimes', models.CharField(choices=[('true', 'True'), ('false', 'False')], default='true', max_length=5)),
                ('outputMOEs', models.CharField(choices=[('true', 'True'), ('false', 'False')], default='true', max_length=5)),
                ('outputArcLoads', models.CharField(choices=[('true', 'True'), ('false', 'False')], default='true', max_length=5)),
                ('outputUsersPaths', models.CharField(choices=[('true', 'True'), ('false', 'False')], default='false', max_length=5)),
                ('outputIterations', models.CharField(choices=[('true', 'True'), ('false', 'False')], default='false', max_length=5)),
                ('outputUsersTimes', models.CharField(choices=[('true', 'True'), ('false', 'False')], default='false', max_length=5)),
                ('feedUsers', models.CharField(choices=[('true', 'True'), ('false', 'False')], default='false', max_length=5)),
                ('log', models.TextField(default='log')),
                ('outputGeneralizedCosts', models.CharField(choices=[('true', 'True'), ('false', 'False')], default='false', max_length=5)),
                ('phi_in_H', models.IntegerField(default=-1)),
                ('phi_in_S', models.IntegerField(default=-1)),
                ('phi_out_H', models.IntegerField(default=-1)),
                ('phi_out_S', models.IntegerField(default=-1)),
                ('ttime_H', models.IntegerField(default=-1)),
                ('ttime_S', models.IntegerField(default=-1)),
                ('users', models.IntegerField(default=-1)),
                ('horizontalQueueing', models.CharField(choices=[('true', 'True'), ('false', 'False')], default='false', help_text='Check to model horizontal queues with a maximal occupancy', max_length=5)),
                ('jamDensity', models.FloatField(default=4, help_text='Vehicle length for the spillback effect')),
                ('startTime', models.IntegerField(default=360, help_text='Starting time of the simulated period (in minutes after midnight)')),
                ('lastRecord', models.IntegerField(default=720, help_text='Ending time of the simulated period (in minutes after midnight)')),
                ('recordsInterval', models.IntegerField(choices=[(5, '5 min.'), (10, '10 min.'), (15, '15 min.'), (20, '20 min.')], default=10, help_text='Interval of time at which the results are stored')),
                ('emailOnCompletion', models.CharField(choices=[('true', 'True'), ('false', 'False')], default='false', help_text='If checked, send an e-mail when the simulation run has ended', max_length=5)),
                ('simpid', models.IntegerField(default=-1)),
                ('shellpid', models.IntegerField(default=-1)),
                ('contact', models.BooleanField(default=False, help_text='If checked, anyone with access to the simulation will be able to access your email to contact you.', verbose_name='Available for contact')),
                ('public', models.BooleanField(default=True, help_text='If checked, the simulation can be seen (but not edited) by everyone', verbose_name='Public simulation')),
                ('has_changed', models.BooleanField(default=True)),
                ('locked', models.BooleanField(default=False)),
                ('pinned', models.BooleanField(default=False)),
                ('random_seed', models.IntegerField(default=0, help_text='Seed used by the random number generator')),
                ('random_seed_check', models.BooleanField(default=False, help_text='If checked, the random number generator use the specified seed; else, a random seed is used')),
                ('environment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='metro_app.environment')),
                ('icSimulation', models.ForeignKey(blank=True, db_column='icSimulation', help_text='Simulation used as an initialization step for the network loading', null=True, on_delete=django.db.models.deletion.SET_NULL, to='metro_app.simulation')),
                ('scenario', models.ForeignKey(db_column='scenario', default=1, on_delete=django.db.models.deletion.CASCADE, to='metro_app.scenario')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Simulation',
            },
        ),
        migrations.CreateModel(
            name='SimulationMOEs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('simulation', models.IntegerField(default=0)),
                ('day', models.IntegerField(default=0, help_text='Current day in the simulation', verbose_name='Day')),
                ('runid', models.IntegerField(default=0)),
                ('stac', models.FloatField(default=0, help_text='Criterion based on the relative variations of travel times from one iteration to the next (in percentage)', verbose_name='STAC (%)')),
                ('expect', models.FloatField(default=0, help_text='Criterion based on the difference between expected travel times and effective travel times (in percentage)', verbose_name='EXPECT (%)')),
                ('users', models.IntegerField(default=0, help_text='Total number of travelers in the simulation', verbose_name='Travelers')),
                ('drivers', models.IntegerField(default=0, help_text='Total number of travelers who chose to travel by car', verbose_name='Drivers')),
                ('tt0cost', models.FloatField(default=0, help_text='Average free flow travel cost for drivers (in euros)', verbose_name='Free Flow Travel Cost (€)')),
                ('toll', models.FloatField(default=0, help_text='Sum of all toll revenues (in euros)', verbose_name='Collected Revenues (€)')),
                ('period', models.FloatField(default=0, help_text='Length of the peak period (in hours)', verbose_name='Peak Period Length (h)')),
                ('cong', models.FloatField(default=0, help_text='Average congestion on the links selected by at least one driver (in percentage)', verbose_name='Congestion (%)')),
                ('vehkm', models.FloatField(default=0, help_text='Total mileage of all drivers (in millions of kilometers)', verbose_name='Mileage (10^6 km)')),
                ('speed', models.FloatField(default=0, help_text='Average speed of drivers (in km/h)', verbose_name='Speed (km/h)')),
                ('narcs', models.FloatField(default=0, help_text="Average number of road sections per driver's trip", verbose_name='Number of Roads')),
                ('ttime', models.FloatField(default=0, help_text='Average travel time for drivers (in minutes)', verbose_name='Travel Time (min)')),
                ('cost', models.FloatField(default=0, help_text='Average travel cost for drivers, including tolls (in euros)', verbose_name='Travel Cost (€)')),
                ('surp', models.FloatField(default=0, help_text='Average accessibility of travelers (in euros)', verbose_name='Consumer Surplus (€)')),
                ('equi', models.FloatField(default=0, help_text='Standard error of the consumer surplus (in euros)', verbose_name='Equity (€)')),
                ('early', models.FloatField(default=0, help_text='Average delay of drivers who arrive too early (in minutes)', verbose_name='Mean Early Delay (min)')),
                ('late', models.FloatField(default=0, help_text='Average delay of drivers who arrive too late (in minutes)', verbose_name='Mean Late Delay (min)')),
                ('scost', models.FloatField(default=0, help_text='Average schedule delay cost for drivers (in euros)', verbose_name='Schedule Delay Cost (€)')),
                ('earpop', models.FloatField(default=0, help_text='Ratio of drivers who arrive too early (in percentage)', verbose_name='Early Ratio (%)')),
                ('ontpop', models.FloatField(default=0, help_text='Ratio of drivers who arrive on time (in percentage)', verbose_name='On-Time Ratio (%)')),
                ('latpop', models.FloatField(default=0, help_text='Ratio of drivers who arrive late (in percentage)', verbose_name='Late Ratio (%)')),
            ],
            options={
                'db_table': 'SimulationMOEs',
            },
        ),
        migrations.CreateModel(
            name='Vector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.TextField(blank=True, db_column='data', default='', null=True)),
            ],
            options={
                'db_table': 'Vector',
            },
        ),
        migrations.CreateModel(
            name='UserType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='Name of the traveler type', max_length=50, verbose_name='Traveler type')),
                ('comment', models.CharField(blank=True, default='', help_text='Optional comment of the traveler type', max_length=100, null=True)),
                ('typeOfModeMu', models.CharField(choices=[('CONSTANT', 'Constant'), ('MINTTCOST', 'Free flow travel cost'), ('ALPHATI', 'Alpha TI')], default='CONSTANT', help_text='Specify how the mu is computed (constant, adaptive to alpha or adaptive to free-flow travel cost)', max_length=9, verbose_name='Type of Mode Mu')),
                ('typeOfDepartureMu', models.CharField(choices=[('CONSTANT', 'Constant'), ('MINTTCOST', 'Free flow travel cost'), ('ALPHATI', 'Alpha TI')], default='CONSTANT', help_text='Specify how the mu is computed (constant, adaptive to alpha or adaptive to free-flow travel cost)', max_length=9, verbose_name='Type of Departure Mu')),
                ('typeOfRouteMu', models.CharField(choices=[('CONSTANT', 'Constant'), ('MINTTCOST', 'Free flow travel cost'), ('ALPHATI', 'Alpha TI')], default='CONSTANT', help_text='Specify how the mu is computed (constant, adaptive to alpha or adaptive to free-flow travel cost)', max_length=9, verbose_name='Type of Route Mu')),
                ('typeOfRouteChoice', models.CharField(choices=[('DETERMINISTIC', 'Deterministic'), ('STOCHASTIC', 'Stochastic')], default='DETERMINISTIC', help_text='Route choice is either deterministic or stochastic', max_length=13, verbose_name='Type of Route Choice')),
                ('localATIS', models.CharField(choices=[('true', 'True'), ('false', 'False')], default='true', help_text='Allow travelers to observe congestion on the downstream links when they arrive at an intersection', max_length=5, verbose_name='Local ATIS')),
                ('modeChoice', models.CharField(choices=[('true', 'True'), ('false', 'False')], default='false', help_text='Enable or disable the choice between public transportation and driving', max_length=5, verbose_name='Mode Choice')),
                ('modeShortRun', models.CharField(choices=[('true', 'True'), ('false', 'False')], default='true', help_text='With short term choice, the generalized cost associated to the car depends on the departure time; with long term choice, it is independent of time', max_length=5, verbose_name='Mode Short Run')),
                ('commuteType', models.CharField(choices=[('MORNING', 'Morning'), ('EVENING', 'Evening')], default='MORNING', help_text='In morning simulations, the travelers target a desired arrival time; in evening simulations, the travelers target a desired departure time', max_length=7, verbose_name='Commute Type')),
                ('user_id', models.IntegerField(default=-1, verbose_name='Id')),
                ('alphaTI', models.ForeignKey(db_column='alphaTI', on_delete=django.db.models.deletion.CASCADE, related_name='alphaTI', to='metro_app.distribution', verbose_name='Alpha TI')),
                ('alphaTP', models.ForeignKey(db_column='alphaTP', on_delete=django.db.models.deletion.CASCADE, related_name='alphaTP', to='metro_app.distribution', verbose_name='Alpha TP')),
                ('beta', models.ForeignKey(db_column='beta', on_delete=django.db.models.deletion.CASCADE, related_name='beta', to='metro_app.distribution', verbose_name='Beta')),
                ('delta', models.ForeignKey(db_column='delta', on_delete=django.db.models.deletion.CASCADE, related_name='delta', to='metro_app.distribution', verbose_name='Delta')),
                ('departureMu', models.ForeignKey(db_column='departureMu', on_delete=django.db.models.deletion.CASCADE, related_name='departureMu', to='metro_app.distribution', verbose_name='Departure Mu')),
                ('gamma', models.ForeignKey(db_column='gamma', on_delete=django.db.models.deletion.CASCADE, related_name='gamma', to='metro_app.distribution', verbose_name='Gamma')),
                ('modeMu', models.ForeignKey(db_column='modeMu', on_delete=django.db.models.deletion.CASCADE, related_name='modeMu', to='metro_app.distribution', verbose_name='Mode Mu')),
                ('penaltyTP', models.ForeignKey(db_column='penaltyTP', on_delete=django.db.models.deletion.CASCADE, related_name='penaltyTP', to='metro_app.distribution', verbose_name='Penalty TP')),
                ('routeMu', models.ForeignKey(db_column='routeMu', on_delete=django.db.models.deletion.CASCADE, related_name='routeMu', to='metro_app.distribution', verbose_name='Route Mu')),
                ('tstar', models.ForeignKey(db_column='tstar', on_delete=django.db.models.deletion.CASCADE, related_name='tstar', to='metro_app.distribution', verbose_name='t*')),
            ],
            options={
                'db_table': 'UserType',
            },
        ),
        migrations.CreateModel(
            name='Turn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('atnode', models.IntegerField(default=0)),
                ('fromnode', models.IntegerField(default=0)),
                ('tonode', models.IntegerField(default=0)),
                ('capacity', models.FloatField(default=0)),
                ('penalty', models.FloatField(default=0)),
                ('network', models.ManyToManyField(db_table='Network_Turn', to='metro_app.Network')),
            ],
            options={
                'db_table': 'Turn',
            },
        ),
        migrations.CreateModel(
            name='Supply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('comment', models.CharField(blank=True, max_length=100, null=True)),
                ('functionset', models.ForeignKey(db_column='functionset', on_delete=django.db.models.deletion.CASCADE, to='metro_app.functionset')),
                ('network', models.ForeignKey(db_column='network', on_delete=django.db.models.deletion.CASCADE, to='metro_app.network')),
                ('pttimes', models.ForeignKey(db_column='pttimes', on_delete=django.db.models.deletion.CASCADE, to='metro_app.matrices')),
            ],
            options={
                'db_table': 'Supply',
            },
        ),
        migrations.CreateModel(
            name='SimulationRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('status', models.CharField(default='Preparing', max_length=25)),
                ('start_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('time_taken', models.DurationField(blank=True, null=True)),
                ('network_output', models.BooleanField(default=False)),
                ('link_output', models.BooleanField(default=False)),
                ('user_output', models.BooleanField(default=False)),
                ('user_path', models.BooleanField(default=False)),
                ('simulation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='metro_app.simulation')),
            ],
            options={
                'db_table': 'SimulationRun',
            },
        ),
        migrations.AddField(
            model_name='scenario',
            name='supply',
            field=models.ForeignKey(db_column='supply', on_delete=django.db.models.deletion.CASCADE, to='metro_app.supply'),
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('points', models.IntegerField(default=0)),
                ('network', models.ManyToManyField(db_table='Network_Region', to='metro_app.Network')),
            ],
            options={
                'db_table': 'Region',
            },
        ),
        migrations.CreateModel(
            name='Policy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('baseValue', models.FloatField(default=0, verbose_name='Value')),
                ('type', models.CharField(choices=[('BAN', 'Ban'), ('PRICING', 'Pricing'), ('RESTRAINT', 'Restraint'), ('INCIDENT', 'Incident')], default='BAN', max_length=9)),
                ('parameter', models.CharField(choices=[('none', 'None'), ('capacity', 'Capacity'), ('lanes', 'Lanes'), ('speed', 'Speed'), ('ul1', 'ul1'), ('ul2', 'ul2'), ('ul3', 'ul3')], default='none', max_length=8)),
                ('dayStart', models.IntegerField(blank=True, default=0, null=True)),
                ('dayEnd', models.IntegerField(blank=True, default=0, null=True)),
                ('location', models.ForeignKey(db_column='location', help_text='Area where the policy applies', on_delete=django.db.models.deletion.CASCADE, to='metro_app.linkselection')),
                ('scenario', models.ManyToManyField(db_table='Scenario_Policy', to='metro_app.Scenario')),
                ('timeVector', models.ForeignKey(db_column='timeVector', on_delete=django.db.models.deletion.CASCADE, related_name='timeVector', to='metro_app.vector', verbose_name='Time')),
                ('usertype', models.ForeignKey(blank=True, db_column='usertype', help_text='Traveler-type impacted by the policy', null=True, on_delete=django.db.models.deletion.CASCADE, to='metro_app.usertype')),
                ('valueVector', models.ForeignKey(blank=True, db_column='valueVector', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='valueVector', to='metro_app.vector')),
            ],
            options={
                'db_table': 'Policy',
            },
        ),
        migrations.CreateModel(
            name='Path',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('origin', models.IntegerField()),
                ('destination', models.IntegerField()),
                ('link', models.ManyToManyField(db_table='Path_Link', to='metro_app.Link')),
                ('network', models.ManyToManyField(db_table='Network_Path', to='metro_app.Network')),
            ],
            options={
                'db_table': 'Path',
            },
        ),
        migrations.CreateModel(
            name='Matrix',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('r', models.FloatField(default=0, verbose_name='Population')),
                ('matrices', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='metro_app.matrices')),
                ('p', models.ForeignKey(db_column='p', default=1, on_delete=django.db.models.deletion.CASCADE, related_name='origin', to='metro_app.centroid', verbose_name='Origin')),
                ('q', models.ForeignKey(db_column='q', default=1, on_delete=django.db.models.deletion.CASCADE, related_name='destination', to='metro_app.centroid', verbose_name='Destination')),
            ],
            options={
                'db_table': 'Matrix',
            },
        ),
        migrations.AddField(
            model_name='linkselection',
            name='network',
            field=models.ForeignKey(db_column='network', on_delete=django.db.models.deletion.CASCADE, to='metro_app.network'),
        ),
        migrations.AddField(
            model_name='link',
            name='network',
            field=models.ManyToManyField(db_table='Network_Link', to='metro_app.Network'),
        ),
        migrations.AddField(
            model_name='link',
            name='vdf',
            field=models.ForeignKey(db_column='vdf', help_text='Congestion function that describes the congestion model', on_delete=django.db.models.deletion.CASCADE, to='metro_app.function', verbose_name='Congestion function'),
        ),
        migrations.AddField(
            model_name='function',
            name='functionset',
            field=models.ManyToManyField(db_table='FunctionSet_Function', to='metro_app.FunctionSet'),
        ),
        migrations.CreateModel(
            name='DemandSegment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scale', models.FloatField(default=1)),
                ('demand', models.ManyToManyField(db_table='Demand_DemandSegment', to='metro_app.Demand')),
                ('matrix', models.ForeignKey(db_column='matrix', on_delete=django.db.models.deletion.CASCADE, to='metro_app.matrices')),
                ('usertype', models.ForeignKey(db_column='usertype', on_delete=django.db.models.deletion.CASCADE, to='metro_app.usertype')),
            ],
            options={
                'db_table': 'DemandSegment',
            },
        ),
        migrations.CreateModel(
            name='CrossingSelection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('storetype', models.IntegerField()),
                ('definition', models.TextField()),
                ('crossing', models.ManyToManyField(db_table='CrossingSelection_Crossing', to='metro_app.Crossing')),
                ('network', models.ForeignKey(db_column='network', on_delete=django.db.models.deletion.CASCADE, to='metro_app.network')),
            ],
            options={
                'db_table': 'CrossingSelection',
            },
        ),
        migrations.AddField(
            model_name='crossing',
            name='network',
            field=models.ManyToManyField(db_table='Network_Crossing', to='metro_app.Network'),
        ),
        migrations.CreateModel(
            name='CentroidSelection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('storetype', models.IntegerField()),
                ('definition', models.TextField()),
                ('centroid', models.ManyToManyField(db_table='CentroidSelection_Centroid', to='metro_app.Centroid')),
                ('network', models.ForeignKey(db_column='network', on_delete=django.db.models.deletion.CASCADE, to='metro_app.network')),
            ],
            options={
                'db_table': 'CentroidSelection',
            },
        ),
        migrations.AddField(
            model_name='centroid',
            name='network',
            field=models.ManyToManyField(db_table='Network_Centroid', to='metro_app.Network'),
        ),
        migrations.CreateModel(
            name='BatchRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('comment', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('centroid_file', models.FileField(blank=True, null=True, upload_to='import_files')),
                ('crossing_file', models.FileField(blank=True, null=True, upload_to='import_files')),
                ('function_file', models.FileField(blank=True, null=True, upload_to='import_files')),
                ('link_file', models.FileField(blank=True, null=True, upload_to='import_files')),
                ('public_transit_file', models.FileField(blank=True, null=True, upload_to='import_files')),
                ('traveler_file', models.FileField(blank=True, null=True, upload_to='import_files')),
                ('pricing_file', models.FileField(blank=True, null=True, upload_to='import_files')),
                ('zip_file', models.FileField(blank=True, null=True, upload_to='import_files')),
                ('run_order', models.IntegerField(default=1)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='metro_app.batch')),
                ('run', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='metro_app.simulationrun')),
            ],
            options={
                'db_table': 'BatchRun',
            },
        ),
        migrations.AddField(
            model_name='batch',
            name='simulation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='metro_app.simulation'),
        ),
        migrations.CreateModel(
            name='ArticleFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(default='', max_length=500, upload_to='articles/')),
                ('file_name', models.CharField(max_length=500)),
                ('file_article', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='metro_app.article')),
            ],
        ),
    ]
